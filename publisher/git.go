package publisher

import (
	"blogo/util"
	"os"
	"os/exec"
	"path/filepath"
)

func resetRepo() {
	workDir, err := os.Getwd()
	util.CheckError(err)

	os.RemoveAll(workDir + "/publish")
	util.CheckError(err)

}

func viaGit() {
	workDir, err := os.Getwd()
	util.CheckError(err)

	buildDir := filepath.Join(workDir, "build")
	publishDir := filepath.Join(workDir, "publish")

	err = os.RemoveAll(publishDir)
	util.CheckError(err)

	err = os.Mkdir("publish", os.ModeDir|0755)
	util.CheckError(err)

	os.Chdir("publish")
	err = exec.Command("git", "init").Run()
	util.CheckError(err)

	err = exec.Command("git", "remote", "add", "origin", util.Config.GitRepo).Run()
	util.CheckError(err)

	err = exec.Command("git", "pull", "origin", util.Config.Branch).Run()
	util.CheckError(err)

	util.ClearDir(publishDir, []string{".git"})

	util.CopyDir(buildDir, publishDir)

	err = exec.Command("git", "add", "*").Run()
	util.CheckError(err)

	err = exec.Command("git", "commit", "-a", "-m", "Generated by Blogo").Run()
	util.CheckError(err)

	cmd := exec.Command("git", "push", "origin", util.Config.Branch)
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	err = cmd.Run()
	util.CheckError(err)

	os.Chdir("..")

}
